// Copyright 2023 Outreach Corporation. All Rights Reserved.

// Code generated by stencil-smartstore. EDIT ONLY INSIDE THE BLOCKS!
//
// Description: This file contains the SmartStore integration code
// Managed: true

package main

import (
	"context"

	"github.com/getoutreach/smartstore/pkg/smartstore"
	"github.com/getoutreach/vivekshahintro/internal/orglifecycle"
	"github.com/pkg/errors"
	///Block(imports)
	///EndBlock(imports)
)

// smartStoreDependencies carries dependencies managed by smartstore
// so that code in main() can have access to them
type smartStoreDependencies struct {
	// connPoolRouterMap allows you to access your ConnPoolRouters based on the resource name.
	// This is meant to be used only for Org-type schema targets, not Fixed schema targets
	// https://engdocs.outreach.cloud/github.com/getoutreach/smartstore/pkg/smartstore#ConnPoolRouterMap
	connPoolRouterMap smartstore.ConnPoolRouterMap
}

// Close gracefully shuts down each dependency
func (s *smartStoreDependencies) Close(ctx context.Context) error {
	if s.connPoolRouterMap != nil {
		return s.connPoolRouterMap.Close(ctx)
	}
	return nil
}

// setupSmartStoreIntegration configures this service to use smartstore.
// It returns an async.Runner which should be registered in main as a service activity
func setupSmartStoreIntegration(ctx context.Context) (*smartStoreDependencies, error) {
	deps := &smartStoreDependencies{}
	resourceNames := []string{
		"vivekshahintro",
	}

	connPoolRouterBldrs, err := smartstore.ConnPoolRouters(ctx, resourceNames...)
	if err != nil {
		return nil, errors.Wrap(err, "smartstore conn pool router builder")
	}

	///Block(connpoolrouters)

	///EndBlock(connpoolrouters)

	connPoolRouters, err := connPoolRouterBldrs.Connect(ctx)
	if err != nil {
		return nil, errors.Wrap(err, "smartstore conn pool router connect")
	}
	deps.connPoolRouterMap = connPoolRouters
	// stencil-smartstore: No ingestion handlers detected,
	//   so we are not generating the ingestion org lifecycle integration

	connPoolRouters.RegisterOrgLifecycleCreator(&orglifecycle.Default)
	// stencil-smartstore: not rendering ingestion OrgCreator unless there is an ingestionHandler in service.yaml
	///Block(orglifeHooks)

	///EndBlock(orglifeHooks)
	// stencil-smartstore: not rendering ingestion OrgDeleter unless there is an ingestionHandler in service.yaml
	connPoolRouters.RegisterOrgLifecycleDeleter(&orglifecycle.Default)
	return deps, nil
}
