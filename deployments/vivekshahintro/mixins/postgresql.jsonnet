// Code generated by stencil-smartstore. DO NOT EDIT.
// This file processes managedResources.postgreSQL manifest.
// Please override in postgresql.config.jsonnet only (do not use app.config please).
local database = import 'kubernetes/database.libsonnet';
local ok = import 'kubernetes/outreach.libsonnet';
local app = (import 'kubernetes/app.libsonnet').info('vivekshahintro');
local appImageRegistry = std.extVar('appImageRegistry');
local team = 'ce-success-plans-services';

local isLocalDev = app.environment == 'local_development';

local postgresDatabases = {
  local this = self,
  // the specs do not have instance_classes.default - default is provided in jsonnet_lib.PostgresqlDatabaseCluster and
  // users can override instance_classes.default and other settings inside postgresql.config.jsonnet per environment or bento
  default_postgresql_spec_:: {
    spec+: {
      iam_role_attachments+: [
        {
          // Attach the role for RDS Postgres to be able to export to S3.
          // The role is managed here:
          // https://github.com/getoutreach/polaroid/blob/59c5b041c98890bc33bbc4619a1b2170fe27ec95/deployments/polaroid/s3/main.tf#L100
          role_arn: 'arn:aws:iam::182192988802:role/polaroid_rds_postgres',
          feature: 's3Export',
        },
      ],
    },
  },
  vivekshahintro_postgresql_spec_:: {},
  vivekshahintro_database: database.PostgresqlDatabaseCluster('vivekshahintro', app=app.name, namespace=app.namespace, environment=app.environment) {
    // note: some params are not used in devenv
    database_name: 'vivekshahintro',
    bento: app.bento,
    engine: {
      version: '13.4',
      parameter_group_family: 'aurora-postgresql13',
    },
    team: team,
    tier: 'tier-2',
    personal_information: 'yes',
    // temp flag to instruct DPO to generate built-in roles and users for the managed postgresql
    temp_builtin_users: true,
  } + this.default_postgresql_spec_ + this.vivekshahintro_postgresql_spec_,
};

// In a localDev deployment, we can't rely on the configmaps and secrets created
// by the k8s Postgres database resources above.  Here we set up our own so that
// `devconfig` can install them as local overrides.
local localPostgresDatabaseConfigs = {
  'config-pg-vivekshahintro-cfg': ok.ConfigMap('pg-vivekshahintro-cfg', app.namespace) {
    local this = self,
    data_:: {
      Connect: {
        databasename: 'vivekshahintro',
        Shards: {
          default: {
            Endpoints: [
              {
                Host: 'service-postgresql.bento1a.svc.cluster.local',
                Port: 5432,
                SSLMode: 'disable',
                IsWritable: true,
              },
            ],
          },
        },
      },
      Users: {
        infra: {
          SecretName: 'pg-vivekshahintro-users',
          Username: ok.GoSecretData('/run/secrets/outreach.io/pg-vivekshahintro-users/infra_username'),
          Password: ok.GoSecretData('/run/secrets/outreach.io/pg-vivekshahintro-users/infra_password'),
        },
        readonly: {
          SecretName: 'pg-vivekshahintro-users',
          Username: ok.GoSecretData('/run/secrets/outreach.io/pg-vivekshahintro-users/readonly_username'),
          Password: ok.GoSecretData('/run/secrets/outreach.io/pg-vivekshahintro-users/readonly_password'),
        },
        readwrite: {
          SecretName: 'pg-vivekshahintro-users',
          Username: ok.GoSecretData('/run/secrets/outreach.io/pg-vivekshahintro-users/readwrite_username'),
          Password: ok.GoSecretData('/run/secrets/outreach.io/pg-vivekshahintro-users/readwrite_password'),
        },
      },
    },
    data: {
      'pg-vivekshahintro-config.yaml': std.manifestJsonEx(this.data_, indent=' '),
    },
  },
  'secret-pg-vivekshahintro-users': ok.Secret('pg-vivekshahintro-users', app.namespace) {
    data_:: {
      infra_username: 'infra',
      infra_password: 'doesntmatter',
      readonly_username: 'readonly',
      readonly_password: 'doesntmatter',
      readwrite_username: 'readwrite',
      readwrite_password: 'doesntmatter',
    },
  },
};

// In a `local_development` deployment, we point to the `migrations`
// directory that exists here in this very repo.  We compute its path here.
local step1 = std.strReplace(std.thisFile, 'file://', '');
local step2 = std.split(step1, '/');
local step3 = step2[0:std.length(step2) - 4] + ['migrations'];
local localMigrationsPath = std.join('/', step3);
local migrationPathSettings = if isLocalDev then { baseMigrationsPath: localMigrationsPath } else {};

local schema_migrations_configmap = {
  'config-pg-vivekshahintro-schemas': ok.ConfigMap('config-pg-vivekshahintro-schemas', app.namespace) {
    local this = self,
    data_:: [
      { name: 'vivekshahintro', target: 'Org', dirName: '' } + migrationPathSettings,
    ],
    data: {
      'pg-vivekshahintro-schemas.yaml': std.manifestJsonEx(this.data_, indent=' '),
    },
  },
};

local pgvolumes = import '../smartstore/postgresql.volumes.jsonnet';

local postgresql_container_overrides = {
  deployment+: {
    spec+: {
      template+: {
        spec+: {
          containers_+:: {
            default+: {
              volumeMounts_+:: pgvolumes.postgresql_volume_mounts,
            },
          },
          volumes_+:: pgvolumes.postgresql_volumes,
        },
      },
    },
  },
};

postgresDatabases +
schema_migrations_configmap +
(import '../smartstore/postgresql.migrations.jsonnet') +
postgresql_container_overrides +
{ smartstore_trace_configmap: pgvolumes.smartstore_trace_configmap } +
(import '../configs/postgresql.config.jsonnet') +
(if isLocalDev then localPostgresDatabaseConfigs else {})
